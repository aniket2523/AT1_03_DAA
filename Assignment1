#include <iostream>
using namespace std;

void merge(int arr[], int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    // Create temporary arrays
    int leftTemp[n1];
    int rightTemp[n2];

    // Copy data to temporary arrays leftTemp[] and rightTemp[]
    for (int i = 0; i < n1; i++)
        leftTemp[i] = arr[left + i];
    for (int j = 0; j < n2; j++)
        rightTemp[j] = arr[mid + 1 + j];

    int i = 0, j = 0, k = left;

    while (i < n1 && j < n2) {
        if (leftTemp[i] <= rightTemp[j]) {
            arr[k] = leftTemp[i];
            i++;
        } else {
            arr[k] = rightTemp[j];
            j++;
        }
        k++;
    }

    // Copy the remaining elements of leftTemp[], if any
    while (i < n1) {
        arr[k] = leftTemp[i];
        i++;
        k++;
    }

    // Copy the remaining elements of rightTemp[], if any
    while (j < n2) {
        arr[k] = rightTemp[j];
        j++;
        k++;
    }
}

void mergeSort(int arr[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
        merge(arr, left, mid, right);
    }
}

void moveZeroesToEnd(int arr[], int size) {
    int nonZeroCount = 0;

    // Separate non-zero elements and zero elements
    for (int i = 0; i < size; i++) {
        if (arr[i] != 0) {
            swap(arr[i], arr[nonZeroCount]);
            nonZeroCount++;
        }
    }

    // Apply merge sort on non-zero elements
    mergeSort(arr, 0, nonZeroCount - 1);
}

int main() {
    int arr[] = {1, 2, 0, 4, 3, 0, 5, 0};
    int size = sizeof(arr) / sizeof(arr[0]);

    moveZeroesToEnd(arr, size);

    cout << "Modified Array: ";
    for (int i = 0; i < size; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    return 0;
}
